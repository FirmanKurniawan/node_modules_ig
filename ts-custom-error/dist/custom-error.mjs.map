{"version":3,"file":"custom-error.mjs","sources":["../src/utils.ts","../src/custom-error.ts","../src/factory.ts"],"sourcesContent":["/**\n * Fix the prototype chain of the error\n *\n * Use Object.setPrototypeOf\n * Support ES6 environments\n *\n * Fallback setting __proto__\n * Support IE11+, see https://docs.microsoft.com/en-us/scripting/javascript/reference/javascript-version-information\n */\nexport function fixProto(target: Error, prototype: {}) {\n\tconst setPrototypeOf: Function = (Object as any).setPrototypeOf\n\tsetPrototypeOf\n\t\t? setPrototypeOf(target, prototype)\n\t\t: ((target as any).__proto__ = prototype)\n}\n\n/**\n * Capture and fix the error stack when available\n *\n * Use Error.captureStackTrace\n * Support v8 environments\n */\nexport function fixStack(target: Error, fn: Function = target.constructor) {\n\tconst captureStackTrace: Function = (Error as any).captureStackTrace\n\tcaptureStackTrace && captureStackTrace(target, fn)\n}\n","import { fixProto, fixStack } from './utils'\n\n/**\n * Allows to easily extend a base class to create custom applicative errors.\n *\n * example:\n * ```\n * class HttpError extends CustomError {\n * \tpublic constructor(\n * \t\tpublic code: number,\n * \t\tmessage?: string,\n * \t) {\n * \t\tsuper(message)\n * \t}\n * }\n *\n * new HttpError(404, 'Not found')\n * ```\n */\nexport class CustomError extends Error {\n\tname: string\n\n\tconstructor(message?: string) {\n\t\tsuper(message)\n\t\t// set error name as constructor name\n\t\t// see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors\n\t\tthis.name = new.target.name\n\t\t// fix the extended error prototype chain\n\t\t// because typescript __extends implementation can't\n\t\t// see https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n\t\tfixProto(this, new.target.prototype)\n\t\t// try to remove contructor from stack trace\n\t\tfixStack(this)\n\t}\n}\n","import { fixStack } from './utils'\n\nexport interface CustomErrorInterface extends Error {}\n\nexport interface CustomErrorProperties {\n\t[property: string]: any\n}\n\nexport interface CustomErrorConstructor<\n\tProperties extends CustomErrorProperties\n> extends ErrorConstructor {\n\treadonly prototype: CustomErrorInterface\n\tnew (...args: any[]): CustomErrorInterface & Properties\n\t(...args: any[]): CustomErrorInterface & Properties\n}\n\nexport type GenericErrorConstructor =\n\t| ErrorConstructor\n\t| EvalErrorConstructor\n\t| RangeErrorConstructor\n\t| ReferenceErrorConstructor\n\t| SyntaxErrorConstructor\n\t| TypeErrorConstructor\n\t| URIErrorConstructor\n\t| CustomErrorConstructor<CustomErrorProperties>\n\n/**\n * Allows to easily extend native errors to create custom applicative errors.\n *\n * example:\n * ```\n * const HttpError = customErrorFactory(function (code: number, message= '') {\n * \tthis.code = code\n * \tthis.message = message\n * })\n *\n * new HttpError(404, 'Not found')\n * ```\n */\nexport function customErrorFactory<Properties>(\n\tfn: (this: Properties, ...args: any[]) => void,\n\tparent: GenericErrorConstructor = Error,\n): CustomErrorConstructor<Properties> {\n\tfunction CustomError(this: CustomErrorInterface, ...args: any[]): void {\n\t\t// allow simple function call\n\t\tif (!(this instanceof CustomError)) return new CustomError(...args)\n\t\t// apply super\n\t\tparent.apply(this, args)\n\t\t// apply custom fn\n\t\tfn.apply(this, args)\n\t\t// set name from custom fn, default to parent Error name\n\t\tthis.name = fn.name || parent.name\n\t\t// try to remove contructor from stack trace\n\t\tfixStack(this, CustomError)\n\t}\n\n\treturn Object.defineProperties(CustomError, {\n\t\tprototype: {\n\t\t\tvalue: Object.create(parent.prototype, {\n\t\t\t\tconstructor: {\n\t\t\t\t\tvalue: CustomError,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t},\n\t\t\t}),\n\t\t},\n\t})\n}\n"],"names":["tslib_1.__extends"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;kBASyB,MAAe,EAAA;IACvC,IAAM,iBAA4B,MAAA,CAAe;IACjD,cAAA,GACG,cAAA,CAAe,QAAQ,cACrB,MAAA,CAAe,SAAf,GAA2B;;;AASjC,kBAAyB,MAAe,EAAA;IAAA,mBAAA;QAAA,EAAA,GAAe,MAAA,CAAO;;IAC7D,IAAM,oBAA+B,KAAA,CAAc;IACnD,iBAAA,IAAqB,iBAAA,CAAkB,QAAQ;;;;;;;ACLhD;IAAiCA,SAAA;IAGhC,qBAAY;;QAAZ,YACC,MAAA,KAAA,OAAM,QAAN;QAGA,KAAA,CAAK,IAAL,GAAY,UAAA,CAAW;QAIvB,QAAA,CAAS,OAAM,UAAA,CAAW;QAE1B,QAAA,CAAS;;;;IAEX;GAfiC;;;;;4BCqBhC,EACA,EAAA;IAAA,uBAAA;QAAA,MAAA;;IAEA;QAAiD;aAAA,WAAA,EAAA,qBAAA,EAAA;YAAA,IAAA,IAAA;;QAEhD,IAAI,EAAE,IAAA,YAAgB;YAAc,YAAW,WAAA,KAAA,MAAA,CAAA,6BAAe;QAE9D,MAAA,CAAO,KAAP,CAAa,MAAM;QAEnB,EAAA,CAAG,KAAH,CAAS,MAAM;QAEf,IAAA,CAAK,IAAL,GAAY,EAAA,CAAG,IAAH,IAAW,MAAA,CAAO;QAE9B,QAAA,CAAS,MAAM;;;IAGhB,OAAO,MAAA,CAAO,gBAAP,CAAwB,aAAa;QAC3C,WAAW;YACV,OAAO,MAAA,CAAO,MAAP,CAAc,MAAA,CAAO,WAAW;gBACtC,aAAa;oBACZ,OAAO,WADK;oBAEZ,UAAU,IAFE;oBAGZ,cAAc;;;;;;;;;;;;;;;"}